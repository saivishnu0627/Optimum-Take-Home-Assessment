
-- E-commerce Database Schema

-- 1. Users Table
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(100) NOT NULL UNIQUE,
    password_hash VARCHAR2(256) NOT NULL,
    phone VARCHAR2(15),
    role VARCHAR2(20) CHECK (role IN ('CUSTOMER', 'ADMIN')) DEFAULT 'CUSTOMER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP
);

-- 2. Addresses Table
CREATE TABLE addresses (
    address_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(user_id),
    address_line1 VARCHAR2(100) NOT NULL,
    address_line2 VARCHAR2(100),
    city VARCHAR2(50) NOT NULL,
    state VARCHAR2(50) NOT NULL,
    zip_code VARCHAR2(10) NOT NULL,
    country VARCHAR2(50) DEFAULT 'USA',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. Categories Table
CREATE TABLE categories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL UNIQUE,
    description VARCHAR2(200)
);

-- 4. Products Table
CREATE TABLE products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    description VARCHAR2(500),
    price NUMBER(10, 2) NOT NULL CHECK (price >= 0),
    stock NUMBER DEFAULT 0 CHECK (stock >= 0),
    category_id NUMBER REFERENCES categories(category_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 5. Product Variants Table
CREATE TABLE product_variants (
    variant_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id NUMBER REFERENCES products(product_id),
    variant_name VARCHAR2(50) NOT NULL,
    variant_value VARCHAR2(50) NOT NULL
);

-- 6. Product Images Table
CREATE TABLE product_images (
    image_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id NUMBER REFERENCES products(product_id),
    image_url VARCHAR2(255) NOT NULL,
    is_primary CHAR(1) DEFAULT 'N' CHECK (is_primary IN ('Y', 'N'))
);

-- 7. Orders Table
CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER REFERENCES users(user_id),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR2(20) CHECK (status IN ('PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED')),
    total_amount NUMBER(12, 2) NOT NULL CHECK (total_amount >= 0),
    address_id NUMBER REFERENCES addresses(address_id)
) PARTITION BY RANGE (order_date) (
    PARTITION p2024 VALUES LESS THAN (TO_DATE('2025-01-01', 'YYYY-MM-DD')),
    PARTITION p2025 VALUES LESS THAN (TO_DATE('2026-01-01', 'YYYY-MM-DD'))
);

-- 8. Order Items Table
CREATE TABLE order_items (
    order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER REFERENCES orders(order_id),
    product_id NUMBER REFERENCES products(product_id),
    quantity NUMBER NOT NULL CHECK (quantity > 0),
    unit_price NUMBER(10, 2) NOT NULL CHECK (unit_price >= 0)
);

-- 9. Payments Table
CREATE TABLE payments (
    payment_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER REFERENCES orders(order_id),
    amount NUMBER(12, 2) NOT NULL CHECK (amount >= 0),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR2(20) CHECK (payment_method IN ('CREDIT_CARD', 'DEBIT_CARD', 'PAYPAL', 'COD')),
    status VARCHAR2(20) CHECK (status IN ('SUCCESS', 'FAILED', 'PENDING'))
);

-- 10. Reviews Table
CREATE TABLE reviews (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id NUMBER REFERENCES products(product_id),
    user_id NUMBER REFERENCES users(user_id),
    rating NUMBER(1) CHECK (rating BETWEEN 1 AND 5),
    review_text VARCHAR2(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for Performance
CREATE INDEX idx_user_email ON users(email);
CREATE INDEX idx_order_date ON orders(order_date);
CREATE INDEX idx_product_name ON products(name);
CREATE INDEX idx_order_status ON orders(status);
CREATE INDEX idx_payment_method ON payments(payment_method);
CREATE INDEX idx_category_name ON categories(name);

-- Stored Procedure: Calculate Total Sales per Product
CREATE OR REPLACE PROCEDURE calculate_total_sales AS
BEGIN
    FOR rec IN (SELECT p.name, SUM(oi.quantity * oi.unit_price) AS total_sales
                FROM products p
                JOIN order_items oi ON p.product_id = oi.product_id
                GROUP BY p.name) LOOP
        DBMS_OUTPUT.PUT_LINE('Product: ' || rec.name || ' - Total Sales: $' || rec.total_sales);
    END LOOP;
END;
/

-- End of Schema
